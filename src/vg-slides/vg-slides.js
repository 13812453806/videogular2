"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var vg_events_1 = require("../events/vg-events");
var Observable_1 = require("rxjs/Observable");
var vg_states_1 = require("../states/vg-states");
var VgSlides = (function () {
    function VgSlides(ref) {
        this.state = 'paused';
        this.time = { current: 0, total: 0, left: 0 };
        this.buffer = { end: 0 };
        this.subscriptions = {};
        this.canPlay = false;
        this.canPlayThrough = false;
        this.isMetadataLoaded = false;
        this.isWaiting = false;
        this.isCompleted = false;
        this.duration = 0;
        this.currentTime = 0;
        this.volume = 0;
        this.playbackRate = 0;
        this.buffered = {
            end: function (index) { return 0; },
            start: function (index) { return 0; },
            length: 0
        };
        this.lastTime = 0;
        this.elem = ref.nativeElement;
        this.expose();
    }
    VgSlides.prototype.ngOnInit = function () {
        this.currentSlide = this.slides[0];
        for (var i = 0, l = this.slides.length; i < l; i++) {
            this.duration += this.slides[i].end - this.slides[i].start;
        }
        this.expose();
        this.elem.dispatchEvent(new CustomEvent(vg_events_1.VgEvents.VG_LOADED_METADATA));
        this.elem.dispatchEvent(new CustomEvent(vg_events_1.VgEvents.VG_TIME_UPDATE));
        Observable_1.Observable.fromEvent(this.elem, vg_events_1.VgEvents.VG_SEEK)
            .subscribe(this.onSeek.bind(this));
    };
    VgSlides.prototype.onSeek = function () {
        this.currentTime = this.elem.currentTime;
        this.onProgress(this.lastTime);
        if (this.progress) {
            cancelAnimationFrame(this.progress.data.handleId);
            this.lastTime = 0;
            this.progress = undefined;
        }
    };
    VgSlides.prototype.expose = function () {
        for (var prop in this) {
            if (typeof this[prop] === 'function') {
                this.elem[prop] = this[prop].bind(this);
            }
            else {
                this.elem[prop] = this[prop];
            }
        }
    };
    VgSlides.prototype.play = function () {
        var _this = this;
        this.state = vg_states_1.VgStates.VG_PLAYING;
        this.progress = requestAnimationFrame(function (currentTime) { return _this.onProgress(currentTime); });
        this.elem.dispatchEvent(new CustomEvent(vg_events_1.VgEvents.VG_PLAY));
    };
    VgSlides.prototype.pause = function () {
        if (this.progress) {
            cancelAnimationFrame(this.progress.data.handleId);
            this.lastTime = 0;
            this.progress = undefined;
        }
        this.state = vg_states_1.VgStates.VG_PAUSED;
        this.elem.dispatchEvent(new CustomEvent(vg_events_1.VgEvents.VG_PAUSE));
    };
    VgSlides.prototype.changeToSlide = function (slide) {
        this.currentSlide = slide;
    };
    VgSlides.prototype.onProgress = function (currentTime) {
        var _this = this;
        if (!this.lastTime)
            this.lastTime = currentTime;
        this.currentTime += (currentTime - this.lastTime) / 1000;
        this.lastTime = currentTime;
        this.elem.currentTime = this.currentTime;
        this.elem.dispatchEvent(new CustomEvent(vg_events_1.VgEvents.VG_TIME_UPDATE));
        if (this.state === vg_states_1.VgStates.VG_PLAYING) {
            this.progress = requestAnimationFrame(function (currentTime) { return _this.onProgress(currentTime); });
        }
        for (var i = 0, l = this.slides.length; i < l; i++) {
            var slide = this.slides[i];
            // If video duration is longer than slides we change to last slide
            if (i === l - 1 && this.currentTime >= slide.end && this.currentSlide != slide) {
                this.changeToSlide(slide);
                break;
            }
            if (this.currentTime >= slide.start && this.currentTime <= slide.end && this.currentSlide != slide) {
                this.changeToSlide(slide);
                break;
            }
        }
        if (this.currentTime >= this.duration)
            this.onComplete();
    };
    VgSlides.prototype.onComplete = function () {
        if (this.progress) {
            cancelAnimationFrame(this.progress.data.handleId);
        }
        this.state = vg_states_1.VgStates.VG_ENDED;
        this.lastTime = 0;
        this.time.left = 0;
        this.progress = undefined;
        this.elem.dispatchEvent(new CustomEvent(vg_events_1.VgEvents.VG_PAUSE));
        this.elem.dispatchEvent(new CustomEvent(vg_events_1.VgEvents.VG_ENDED));
    };
    __decorate([
        core_1.Input('slides'), 
        __metadata('design:type', Array)
    ], VgSlides.prototype, "slides", void 0);
    VgSlides = __decorate([
        core_1.Component({
            selector: 'vg-slides',
            template: "\n        <img [src]=\"currentSlide.src\">\n    ",
            styles: ["\n        :host {\n            margin: auto;\n        }\n        \n        img {\n            width: 100%;\n        }\n    "
            ]
        }), 
        __metadata('design:paramtypes', [core_1.ElementRef])
    ], VgSlides);
    return VgSlides;
}());
exports.VgSlides = VgSlides;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmctc2xpZGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidmctc2xpZGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxxQkFBMkQsZUFBZSxDQUFDLENBQUE7QUFHM0UsMEJBQXVCLHFCQUFxQixDQUFDLENBQUE7QUFDN0MsMkJBQXlCLGlCQUFpQixDQUFDLENBQUE7QUFDM0MsMEJBQXVCLHFCQUFxQixDQUFDLENBQUE7QUFrQjdDO0lBaUNJLGtCQUFZLEdBQWM7UUE1QjFCLFVBQUssR0FBVSxRQUFRLENBQUM7UUFFeEIsU0FBSSxHQUFPLEVBQUMsT0FBTyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUMsQ0FBQztRQUMzQyxXQUFNLEdBQU8sRUFBQyxHQUFHLEVBQUUsQ0FBQyxFQUFDLENBQUM7UUFDdEIsa0JBQWEsR0FBTyxFQUFFLENBQUM7UUFFdkIsWUFBTyxHQUFXLEtBQUssQ0FBQztRQUN4QixtQkFBYyxHQUFXLEtBQUssQ0FBQztRQUMvQixxQkFBZ0IsR0FBVyxLQUFLLENBQUM7UUFDakMsY0FBUyxHQUFXLEtBQUssQ0FBQztRQUMxQixnQkFBVyxHQUFXLEtBQUssQ0FBQztRQUc1QixhQUFRLEdBQVUsQ0FBQyxDQUFDO1FBQ3BCLGdCQUFXLEdBQVUsQ0FBQyxDQUFDO1FBQ3ZCLFdBQU0sR0FBVSxDQUFDLENBQUM7UUFDbEIsaUJBQVksR0FBVSxDQUFDLENBQUM7UUFDeEIsYUFBUSxHQUEwQjtZQUM5QixHQUFHLEVBQUUsVUFBQyxLQUFZLElBQU0sTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUM7WUFDbEMsS0FBSyxFQUFFLFVBQUMsS0FBWSxJQUFNLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDO1lBQ3BDLE1BQU0sRUFBRSxDQUFDO1NBQ1osQ0FBQztRQUtGLGFBQVEsR0FBVSxDQUFDLENBQUM7UUFHaEIsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsYUFBYSxDQUFDO1FBRTlCLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNsQixDQUFDO0lBRUQsMkJBQVEsR0FBUjtRQUNJLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVuQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUMzQyxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQy9ELENBQUM7UUFFRCxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7UUFFZCxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxvQkFBUSxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQztRQUN0RSxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxvQkFBUSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7UUFDbEUsdUJBQVUsQ0FBQyxTQUFTLENBQU0sSUFBSSxDQUFDLElBQUksRUFBRSxvQkFBUSxDQUFDLE9BQU8sQ0FBQzthQUNqRCxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRUQseUJBQU0sR0FBTjtRQUNJLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7UUFFekMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFL0IsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDaEIsb0JBQW9CLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDbEQsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUM7WUFDbEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxTQUFTLENBQUM7UUFDOUIsQ0FBQztJQUNMLENBQUM7SUFFRCx5QkFBTSxHQUFOO1FBQ0ksR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNwQixFQUFFLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDO2dCQUNuQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDNUMsQ0FBQztZQUNELElBQUksQ0FBQyxDQUFDO2dCQUNGLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2pDLENBQUM7UUFDTCxDQUFDO0lBQ0wsQ0FBQztJQUVELHVCQUFJLEdBQUo7UUFBQSxpQkFLQztRQUpHLElBQUksQ0FBQyxLQUFLLEdBQUcsb0JBQVEsQ0FBQyxVQUFVLENBQUM7UUFDakMsSUFBSSxDQUFDLFFBQVEsR0FBRyxxQkFBcUIsQ0FBQyxVQUFBLFdBQVcsSUFBSSxPQUFBLEtBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLEVBQTVCLENBQTRCLENBQUMsQ0FBQztRQUVuRixJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxvQkFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDL0QsQ0FBQztJQUVELHdCQUFLLEdBQUw7UUFDSSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNoQixvQkFBb0IsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNsRCxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQztZQUNsQixJQUFJLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQztRQUM5QixDQUFDO1FBRUQsSUFBSSxDQUFDLEtBQUssR0FBRyxvQkFBUSxDQUFDLFNBQVMsQ0FBQztRQUVoQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxvQkFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUVELGdDQUFhLEdBQWIsVUFBYyxLQUFnQjtRQUMxQixJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztJQUM5QixDQUFDO0lBRUQsNkJBQVUsR0FBVixVQUFXLFdBQVc7UUFBdEIsaUJBNkJDO1FBNUJHLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztZQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsV0FBVyxDQUFDO1FBQ2hELElBQUksQ0FBQyxXQUFXLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUN6RCxJQUFJLENBQUMsUUFBUSxHQUFHLFdBQVcsQ0FBQztRQUU1QixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBRXpDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksV0FBVyxDQUFDLG9CQUFRLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztRQUVsRSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLLG9CQUFRLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztZQUNyQyxJQUFJLENBQUMsUUFBUSxHQUFHLHFCQUFxQixDQUFDLFVBQUEsV0FBVyxJQUFJLE9BQUEsS0FBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsRUFBNUIsQ0FBNEIsQ0FBQyxDQUFDO1FBQ3ZGLENBQUM7UUFFRCxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBUSxDQUFDLEVBQUUsQ0FBQyxHQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUN6RCxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRTNCLGtFQUFrRTtZQUNsRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsV0FBVyxJQUFJLEtBQUssQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLFlBQVksSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUMzRSxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUMxQixLQUFLLENBQUM7WUFDVixDQUFDO1lBRUQsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsSUFBSSxLQUFLLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxXQUFXLElBQUksS0FBSyxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsWUFBWSxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ2pHLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQzFCLEtBQUssQ0FBQztZQUNWLENBQUM7UUFDTCxDQUFDO1FBRUQsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDO1lBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQzdELENBQUM7SUFFRCw2QkFBVSxHQUFWO1FBQ0ksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDaEIsb0JBQW9CLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdEQsQ0FBQztRQUVELElBQUksQ0FBQyxLQUFLLEdBQUcsb0JBQVEsQ0FBQyxRQUFRLENBQUM7UUFDL0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUM7UUFDbEIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO1FBQ25CLElBQUksQ0FBQyxRQUFRLEdBQUcsU0FBUyxDQUFDO1FBRTFCLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksV0FBVyxDQUFDLG9CQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUM1RCxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxvQkFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQTlJRDtRQUFDLFlBQUssQ0FBQyxRQUFRLENBQUM7OzRDQUFBO0lBakJwQjtRQUFDLGdCQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsV0FBVztZQUNyQixRQUFRLEVBQUUsa0RBRVQ7WUFDRCxNQUFNLEVBQUUsQ0FBQyw2SEFRUjthQUNBO1NBQ0osQ0FBQzs7Z0JBQUE7SUFpSkYsZUFBQztBQUFELENBQUMsQUFoSkQsSUFnSkM7QUFoSlksZ0JBQVEsV0FnSnBCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0VsZW1lbnRSZWYsIElucHV0LCBDb21wb25lbnQsIE9uSW5pdCwgTmdab25lfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7SVBsYXlhYmxlfSBmcm9tIFwiLi4vdmctbWVkaWEvaS1wbGF5YWJsZVwiO1xuaW1wb3J0IHtTbGlkZU1vZGVsfSBmcm9tIFwiLi9zbGlkZS1tb2RlbFwiO1xuaW1wb3J0IHtWZ0V2ZW50c30gZnJvbSBcIi4uL2V2ZW50cy92Zy1ldmVudHNcIjtcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSBcInJ4anMvT2JzZXJ2YWJsZVwiO1xuaW1wb3J0IHtWZ1N0YXRlc30gZnJvbSBcIi4uL3N0YXRlcy92Zy1zdGF0ZXNcIjtcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd2Zy1zbGlkZXMnLFxuICAgIHRlbXBsYXRlOiBgXG4gICAgICAgIDxpbWcgW3NyY109XCJjdXJyZW50U2xpZGUuc3JjXCI+XG4gICAgYCxcbiAgICBzdHlsZXM6IFtgXG4gICAgICAgIDpob3N0IHtcbiAgICAgICAgICAgIG1hcmdpbjogYXV0bztcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaW1nIHtcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICB9XG4gICAgYFxuICAgIF1cbn0pXG5leHBvcnQgY2xhc3MgVmdTbGlkZXMgaW1wbGVtZW50cyBPbkluaXQsIElQbGF5YWJsZSB7XG4gICAgQElucHV0KCdzbGlkZXMnKSBzbGlkZXM6QXJyYXk8U2xpZGVNb2RlbD47XG5cbiAgICBlbGVtOklQbGF5YWJsZTtcblxuICAgIHN0YXRlOnN0cmluZyA9ICdwYXVzZWQnO1xuXG4gICAgdGltZTphbnkgPSB7Y3VycmVudDogMCwgdG90YWw6IDAsIGxlZnQ6IDB9O1xuICAgIGJ1ZmZlcjphbnkgPSB7ZW5kOiAwfTtcbiAgICBzdWJzY3JpcHRpb25zOmFueSA9IHt9O1xuXG4gICAgY2FuUGxheTpib29sZWFuID0gZmFsc2U7XG4gICAgY2FuUGxheVRocm91Z2g6Ym9vbGVhbiA9IGZhbHNlO1xuICAgIGlzTWV0YWRhdGFMb2FkZWQ6Ym9vbGVhbiA9IGZhbHNlO1xuICAgIGlzV2FpdGluZzpib29sZWFuID0gZmFsc2U7XG4gICAgaXNDb21wbGV0ZWQ6Ym9vbGVhbiA9IGZhbHNlO1xuXG4gICAgaWQ6c3RyaW5nO1xuICAgIGR1cmF0aW9uOm51bWJlciA9IDA7XG4gICAgY3VycmVudFRpbWU6bnVtYmVyID0gMDtcbiAgICB2b2x1bWU6bnVtYmVyID0gMDtcbiAgICBwbGF5YmFja1JhdGU6bnVtYmVyID0gMDtcbiAgICBidWZmZXJlZDpUaW1lUmFuZ2VzID0gPFRpbWVSYW5nZXM+e1xuICAgICAgICBlbmQ6IChpbmRleDpudW1iZXIpID0+IHtyZXR1cm4gMDt9LFxuICAgICAgICBzdGFydDogKGluZGV4Om51bWJlcikgPT4ge3JldHVybiAwO30sXG4gICAgICAgIGxlbmd0aDogMFxuICAgIH07XG5cbiAgICBjdXJyZW50U2xpZGU6U2xpZGVNb2RlbDtcbiAgICBwcm9ncmVzczphbnk7XG5cbiAgICBsYXN0VGltZTpudW1iZXIgPSAwO1xuXG4gICAgY29uc3RydWN0b3IocmVmOkVsZW1lbnRSZWYpIHtcbiAgICAgICAgdGhpcy5lbGVtID0gcmVmLm5hdGl2ZUVsZW1lbnQ7XG5cbiAgICAgICAgdGhpcy5leHBvc2UoKTtcbiAgICB9XG4gICAgXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMuY3VycmVudFNsaWRlID0gdGhpcy5zbGlkZXNbMF07XG5cbiAgICAgICAgZm9yIChsZXQgaT0wLCBsPXRoaXMuc2xpZGVzLmxlbmd0aDsgaTxsOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuZHVyYXRpb24gKz0gdGhpcy5zbGlkZXNbaV0uZW5kIC0gdGhpcy5zbGlkZXNbaV0uc3RhcnQ7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmV4cG9zZSgpO1xuXG4gICAgICAgIHRoaXMuZWxlbS5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChWZ0V2ZW50cy5WR19MT0FERURfTUVUQURBVEEpKTtcbiAgICAgICAgdGhpcy5lbGVtLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KFZnRXZlbnRzLlZHX1RJTUVfVVBEQVRFKSk7XG4gICAgICAgIE9ic2VydmFibGUuZnJvbUV2ZW50KDxhbnk+dGhpcy5lbGVtLCBWZ0V2ZW50cy5WR19TRUVLKVxuICAgICAgICAgICAgLnN1YnNjcmliZSh0aGlzLm9uU2Vlay5iaW5kKHRoaXMpKTtcbiAgICB9XG5cbiAgICBvblNlZWsoKSB7XG4gICAgICAgIHRoaXMuY3VycmVudFRpbWUgPSB0aGlzLmVsZW0uY3VycmVudFRpbWU7XG5cbiAgICAgICAgdGhpcy5vblByb2dyZXNzKHRoaXMubGFzdFRpbWUpO1xuXG4gICAgICAgIGlmICh0aGlzLnByb2dyZXNzKSB7XG4gICAgICAgICAgICBjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLnByb2dyZXNzLmRhdGEuaGFuZGxlSWQpO1xuICAgICAgICAgICAgdGhpcy5sYXN0VGltZSA9IDA7XG4gICAgICAgICAgICB0aGlzLnByb2dyZXNzID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZXhwb3NlKCkge1xuICAgICAgICBmb3IgKHZhciBwcm9wIGluIHRoaXMpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpc1twcm9wXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHRoaXMuZWxlbVtwcm9wXSA9IHRoaXNbcHJvcF0uYmluZCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZWxlbVtwcm9wXSA9IHRoaXNbcHJvcF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwbGF5KCkge1xuICAgICAgICB0aGlzLnN0YXRlID0gVmdTdGF0ZXMuVkdfUExBWUlORztcbiAgICAgICAgdGhpcy5wcm9ncmVzcyA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShjdXJyZW50VGltZSA9PiB0aGlzLm9uUHJvZ3Jlc3MoY3VycmVudFRpbWUpKTtcblxuICAgICAgICB0aGlzLmVsZW0uZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoVmdFdmVudHMuVkdfUExBWSkpO1xuICAgIH1cblxuICAgIHBhdXNlKCkge1xuICAgICAgICBpZiAodGhpcy5wcm9ncmVzcykge1xuICAgICAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5wcm9ncmVzcy5kYXRhLmhhbmRsZUlkKTtcbiAgICAgICAgICAgIHRoaXMubGFzdFRpbWUgPSAwO1xuICAgICAgICAgICAgdGhpcy5wcm9ncmVzcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc3RhdGUgPSBWZ1N0YXRlcy5WR19QQVVTRUQ7XG5cbiAgICAgICAgdGhpcy5lbGVtLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KFZnRXZlbnRzLlZHX1BBVVNFKSk7XG4gICAgfVxuXG4gICAgY2hhbmdlVG9TbGlkZShzbGlkZTpTbGlkZU1vZGVsKSB7XG4gICAgICAgIHRoaXMuY3VycmVudFNsaWRlID0gc2xpZGU7XG4gICAgfVxuXG4gICAgb25Qcm9ncmVzcyhjdXJyZW50VGltZSkge1xuICAgICAgICBpZiAoIXRoaXMubGFzdFRpbWUpIHRoaXMubGFzdFRpbWUgPSBjdXJyZW50VGltZTtcbiAgICAgICAgdGhpcy5jdXJyZW50VGltZSArPSAoY3VycmVudFRpbWUgLSB0aGlzLmxhc3RUaW1lKSAvIDEwMDA7XG4gICAgICAgIHRoaXMubGFzdFRpbWUgPSBjdXJyZW50VGltZTtcblxuICAgICAgICB0aGlzLmVsZW0uY3VycmVudFRpbWUgPSB0aGlzLmN1cnJlbnRUaW1lO1xuXG4gICAgICAgIHRoaXMuZWxlbS5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChWZ0V2ZW50cy5WR19USU1FX1VQREFURSkpO1xuXG4gICAgICAgIGlmICh0aGlzLnN0YXRlID09PSBWZ1N0YXRlcy5WR19QTEFZSU5HKSB7XG4gICAgICAgICAgICB0aGlzLnByb2dyZXNzID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGN1cnJlbnRUaW1lID0+IHRoaXMub25Qcm9ncmVzcyhjdXJyZW50VGltZSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaTpudW1iZXI9MCwgbDpudW1iZXI9dGhpcy5zbGlkZXMubGVuZ3RoOyBpPGw7IGkrKykge1xuICAgICAgICAgICAgbGV0IHNsaWRlID0gdGhpcy5zbGlkZXNbaV07XG5cbiAgICAgICAgICAgIC8vIElmIHZpZGVvIGR1cmF0aW9uIGlzIGxvbmdlciB0aGFuIHNsaWRlcyB3ZSBjaGFuZ2UgdG8gbGFzdCBzbGlkZVxuICAgICAgICAgICAgaWYgKGkgPT09IGwtMSAmJiB0aGlzLmN1cnJlbnRUaW1lID49IHNsaWRlLmVuZCAmJiB0aGlzLmN1cnJlbnRTbGlkZSAhPSBzbGlkZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlVG9TbGlkZShzbGlkZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRUaW1lID49IHNsaWRlLnN0YXJ0ICYmIHRoaXMuY3VycmVudFRpbWUgPD0gc2xpZGUuZW5kICYmIHRoaXMuY3VycmVudFNsaWRlICE9IHNsaWRlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGFuZ2VUb1NsaWRlKHNsaWRlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRUaW1lID49IHRoaXMuZHVyYXRpb24pIHRoaXMub25Db21wbGV0ZSgpO1xuICAgIH1cblxuICAgIG9uQ29tcGxldGUoKSB7XG4gICAgICAgIGlmICh0aGlzLnByb2dyZXNzKSB7XG4gICAgICAgICAgICBjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLnByb2dyZXNzLmRhdGEuaGFuZGxlSWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9IFZnU3RhdGVzLlZHX0VOREVEO1xuICAgICAgICB0aGlzLmxhc3RUaW1lID0gMDtcbiAgICAgICAgdGhpcy50aW1lLmxlZnQgPSAwO1xuICAgICAgICB0aGlzLnByb2dyZXNzID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIHRoaXMuZWxlbS5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChWZ0V2ZW50cy5WR19QQVVTRSkpO1xuICAgICAgICB0aGlzLmVsZW0uZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoVmdFdmVudHMuVkdfRU5ERUQpKTtcbiAgICB9XG59XG4iXX0=