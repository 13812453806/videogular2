"use strict";
var vg_controls_1 = require("./vg-controls");
var vg_api_1 = require("../services/vg-api");
var Observable_1 = require("rxjs/Observable");
describe('Controls Bar', function () {
    var controls;
    var ref;
    var api;
    var renderer;
    beforeEach(function () {
        jasmine.clock().uninstall();
        jasmine.clock().install();
        api = new vg_api_1.VgAPI();
        ref = {
            nativeElement: {
                getAttribute: function (name) {
                    return name;
                }
            }
        };
        renderer = {
            setElementClass: function () { }
        };
        controls = new vg_controls_1.VgControls(api, ref, renderer);
    });
    afterEach(function () {
        jasmine.clock().uninstall();
    });
    it('Should have been defined', function () {
        expect(controls).toBeTruthy();
    });
    it('Should listen for mouseenter and mouseleave events', function () {
        spyOn(Observable_1.Observable, 'fromEvent').and.callThrough();
        var vgElem = document.createElement('vg-player');
        api.registerElement(vgElem);
        controls.ngOnInit();
        expect(Observable_1.Observable.fromEvent).toHaveBeenCalledWith(api.videogularElement, 'mouseenter');
        expect(Observable_1.Observable.fromEvent).toHaveBeenCalledWith(api.videogularElement, 'mouseleave');
    });
    it('Should hide controls after view init', function () {
        spyOn(controls, 'hide').and.callFake(function () { });
        controls.autohide = true;
        controls.ngAfterViewInit();
        expect(controls.hide).toHaveBeenCalled();
    });
    it('Should show controls after view init', function () {
        spyOn(controls, 'show').and.callFake(function () { });
        controls.autohide = false;
        controls.ngAfterViewInit();
        expect(controls.show).toHaveBeenCalled();
    });
    it('Should show controls', function () {
        spyOn(window, 'clearTimeout').and.callFake(function () { });
        spyOn(renderer, 'setElementClass').and.callThrough();
        controls.show();
        expect(window.clearTimeout).toHaveBeenCalled();
        expect(renderer.setElementClass).toHaveBeenCalledWith(ref.nativeElement, 'hide', false);
    });
    it('Should hide controls', function () {
        spyOn(renderer, 'setElementClass').and.callThrough();
        controls.autohide = true;
        controls.hide();
        jasmine.clock().tick(3100);
        expect(renderer.setElementClass).toHaveBeenCalledWith(ref.nativeElement, 'hide', true);
    });
    it('Should not hide controls', function () {
        spyOn(renderer, 'setElementClass').and.callThrough();
        controls.autohide = false;
        controls.hide();
        jasmine.clock().tick(3100);
        expect(renderer.setElementClass).not.toHaveBeenCalled();
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmctY29udHJvbHMuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInZnLWNvbnRyb2xzLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDRCQUF5QixlQUFlLENBQUMsQ0FBQTtBQUV6Qyx1QkFBb0Isb0JBQW9CLENBQUMsQ0FBQTtBQUN6QywyQkFBeUIsaUJBQWlCLENBQUMsQ0FBQTtBQUUzQyxRQUFRLENBQUMsY0FBYyxFQUFFO0lBQ3JCLElBQUksUUFBbUIsQ0FBQztJQUN4QixJQUFJLEdBQWMsQ0FBQztJQUNuQixJQUFJLEdBQVMsQ0FBQztJQUNkLElBQUksUUFBUSxDQUFDO0lBRWIsVUFBVSxDQUFDO1FBQ1AsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQzVCLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUUxQixHQUFHLEdBQUcsSUFBSSxjQUFLLEVBQUUsQ0FBQztRQUVsQixHQUFHLEdBQUc7WUFDRixhQUFhLEVBQUU7Z0JBQ1gsWUFBWSxFQUFFLFVBQUMsSUFBSTtvQkFDZixNQUFNLENBQUMsSUFBSSxDQUFDO2dCQUNoQixDQUFDO2FBQ0o7U0FDSixDQUFDO1FBRUYsUUFBUSxHQUFHO1lBQ1AsZUFBZSxFQUFFLGNBQU8sQ0FBQztTQUM1QixDQUFDO1FBRUYsUUFBUSxHQUFHLElBQUksd0JBQVUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFhLFFBQVMsQ0FBQyxDQUFDO0lBQzlELENBQUMsQ0FBQyxDQUFDO0lBRUgsU0FBUyxDQUFDO1FBQ04sT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ2hDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDBCQUEwQixFQUFFO1FBQzNCLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNsQyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxvREFBb0Qs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T0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMzQixNQUFNLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzVELENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1ZnQ29udHJvbHN9IGZyb20gXCIuL3ZnLWNvbnRyb2xzXCI7XG5pbXBvcnQge0VsZW1lbnRSZWYsIFJlbmRlcmVyfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHtWZ0FQSX0gZnJvbSBcIi4uL3NlcnZpY2VzL3ZnLWFwaVwiO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tIFwicnhqcy9PYnNlcnZhYmxlXCI7XG5cbmRlc2NyaWJlKCdDb250cm9scyBCYXInLCAoKSA9PiB7XG4gICAgbGV0IGNvbnRyb2xzOlZnQ29udHJvbHM7XG4gICAgbGV0IHJlZjpFbGVtZW50UmVmO1xuICAgIGxldCBhcGk6VmdBUEk7XG4gICAgbGV0IHJlbmRlcmVyO1xuXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgIGphc21pbmUuY2xvY2soKS51bmluc3RhbGwoKTtcbiAgICAgICAgamFzbWluZS5jbG9jaygpLmluc3RhbGwoKTtcblxuICAgICAgICBhcGkgPSBuZXcgVmdBUEkoKTtcblxuICAgICAgICByZWYgPSB7XG4gICAgICAgICAgICBuYXRpdmVFbGVtZW50OiB7XG4gICAgICAgICAgICAgICAgZ2V0QXR0cmlidXRlOiAobmFtZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmFtZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgcmVuZGVyZXIgPSB7XG4gICAgICAgICAgICBzZXRFbGVtZW50Q2xhc3M6ICgpID0+IHt9XG4gICAgICAgIH07XG5cbiAgICAgICAgY29udHJvbHMgPSBuZXcgVmdDb250cm9scyhhcGksIHJlZiwgKDxSZW5kZXJlcj5yZW5kZXJlcikpO1xuICAgIH0pO1xuXG4gICAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICAgICAgamFzbWluZS5jbG9jaygpLnVuaW5zdGFsbCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ1Nob3VsZCBoYXZlIGJlZW4gZGVmaW5lZCcsICgpID0+IHtcbiAgICAgICAgZXhwZWN0KGNvbnRyb2xzKS50b0JlVHJ1dGh5KCk7XG4gICAgfSk7XG5cbiAgICBpdCgnU2hvdWxkIGxpc3RlbiBmb3IgbW91c2VlbnRlciBhbmQgbW91c2VsZWF2ZSBldmVudHMnLCAoKSA9PiB7XG4gICAgICAgIHNweU9uKE9ic2VydmFibGUsICdmcm9tRXZlbnQnKS5hbmQuY2FsbFRocm91Z2goKTtcblxuICAgICAgICB2YXIgdmdFbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndmctcGxheWVyJyk7XG5cbiAgICAgICAgYXBpLnJlZ2lzdGVyRWxlbWVudCh2Z0VsZW0pO1xuXG4gICAgICAgIGNvbnRyb2xzLm5nT25Jbml0KCk7XG5cbiAgICAgICAgZXhwZWN0KE9ic2VydmFibGUuZnJvbUV2ZW50KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChhcGkudmlkZW9ndWxhckVsZW1lbnQsICdtb3VzZWVudGVyJyk7XG4gICAgICAgIGV4cGVjdChPYnNlcnZhYmxlLmZyb21FdmVudCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoYXBpLnZpZGVvZ3VsYXJFbGVtZW50LCAnbW91c2VsZWF2ZScpO1xuICAgIH0pO1xuXG4gICAgaXQoJ1Nob3VsZCBoaWRlIGNvbnRyb2xzIGFmdGVyIHZpZXcgaW5pdCcsICgpID0+IHtcbiAgICAgICAgc3B5T24oY29udHJvbHMsICdoaWRlJykuYW5kLmNhbGxGYWtlKCgpID0+IHt9KTtcblxuICAgICAgICBjb250cm9scy5hdXRvaGlkZSA9IHRydWU7XG5cbiAgICAgICAgY29udHJvbHMubmdBZnRlclZpZXdJbml0KCk7XG5cbiAgICAgICAgZXhwZWN0KGNvbnRyb2xzLmhpZGUpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcblxuICAgIGl0KCdTaG91bGQgc2hvdyBjb250cm9scyBhZnRlciB2aWV3IGluaXQnLCAoKSA9PiB7XG4gICAgICAgIHNweU9uKGNvbnRyb2xzLCAnc2hvdycpLmFuZC5jYWxsRmFrZSgoKSA9PiB7fSk7XG5cbiAgICAgICAgY29udHJvbHMuYXV0b2hpZGUgPSBmYWxzZTtcblxuICAgICAgICBjb250cm9scy5uZ0FmdGVyVmlld0luaXQoKTtcblxuICAgICAgICBleHBlY3QoY29udHJvbHMuc2hvdykudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ1Nob3VsZCBzaG93IGNvbnRyb2xzJywgKCkgPT4ge1xuICAgICAgICBzcHlPbih3aW5kb3csICdjbGVhclRpbWVvdXQnKS5hbmQuY2FsbEZha2UoKCkgPT4ge30pO1xuICAgICAgICBzcHlPbihyZW5kZXJlciwgJ3NldEVsZW1lbnRDbGFzcycpLmFuZC5jYWxsVGhyb3VnaCgpO1xuXG4gICAgICAgIGNvbnRyb2xzLnNob3coKTtcblxuICAgICAgICBleHBlY3Qod2luZG93LmNsZWFyVGltZW91dCkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgICBleHBlY3QocmVuZGVyZXIuc2V0RWxlbWVudENsYXNzKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChyZWYubmF0aXZlRWxlbWVudCwgJ2hpZGUnLCBmYWxzZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnU2hvdWxkIGhpZGUgY29udHJvbHMnLCAoKSA9PiB7XG4gICAgICAgIHNweU9uKHJlbmRlcmVyLCAnc2V0RWxlbWVudENsYXNzJykuYW5kLmNhbGxUaHJvdWdoKCk7XG5cbiAgICAgICAgY29udHJvbHMuYXV0b2hpZGUgPSB0cnVlO1xuXG4gICAgICAgIGNvbnRyb2xzLmhpZGUoKTtcblxuICAgICAgICBqYXNtaW5lLmNsb2NrKCkudGljaygzMTAwKTtcbiAgICAgICAgZXhwZWN0KHJlbmRlcmVyLnNldEVsZW1lbnRDbGFzcykudG9IYXZlQmVlbkNhbGxlZFdpdGgocmVmLm5hdGl2ZUVsZW1lbnQsICdoaWRlJywgdHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnU2hvdWxkIG5vdCBoaWRlIGNvbnRyb2xzJywgKCkgPT4ge1xuICAgICAgICBzcHlPbihyZW5kZXJlciwgJ3NldEVsZW1lbnRDbGFzcycpLmFuZC5jYWxsVGhyb3VnaCgpO1xuXG4gICAgICAgIGNvbnRyb2xzLmF1dG9oaWRlID0gZmFsc2U7XG5cbiAgICAgICAgY29udHJvbHMuaGlkZSgpO1xuXG4gICAgICAgIGphc21pbmUuY2xvY2soKS50aWNrKDMxMDApO1xuICAgICAgICBleHBlY3QocmVuZGVyZXIuc2V0RWxlbWVudENsYXNzKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xufSk7XG4iXX0=